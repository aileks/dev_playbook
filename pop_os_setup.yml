---
- name: Set up Pop!_OS 24.04 workstation
  hosts: localhost
  become: no
  vars:
    the_user: "{{ ansible_user_id }}"
  tasks:
    - name: Enable Universe repository
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ ansible_distribution_release }} universe"
        state: present

    - name: Add WezTerm GPG key
      shell: |
        curl -fsSL https://apt.fury.io/wez/gpg.key | gpg --yes --dearmor -o /etc/apt/keyrings/wezterm-fury.gpg
      become: yes

    - name: Add WezTerm repository
      shell: |
        echo 'deb [signed-by=/etc/apt/keyrings/wezterm-fury.gpg] https://apt.fury.io/wez/ * *' | tee /etc/apt/sources.list.d/wezterm.list
      become: yes

    - name: Update apt cache
      apt:
        update_cache: yes
      become: yes

    - name: Install necessary packages
      apt:
        name:
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev
          - libx11-dev
          - libxft-dev
          - libxinerama-dev
          - libfreetype6-dev
          - libfontconfig1-dev
          - libimlib2-dev
          - git
          - neovim
          - zsh
          - tmux
          - fzf
          - ripgrep
          - eza
          - trash-cli
          - dunst
          - fcitx5
          - fcitx5-rime
          - feh
          - wezterm
          - rofi
          - picom
          - acpi
          - zoxide
        state: present
      become: yes

    - name: Install Brave
      shell: |
        curl -fsS https://dl.brave.com/install.sh | sh
      become: yes

    - name: Ensure Zsh is the default shell
      become: yes
      user:
        name: "{{ the_user }}"
        shell: /usr/bin/zsh

    - name: Download Oh-My-Zsh installation script
      get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/install_ohmyzsh.sh

    - name: Run Oh-My-Zsh installation script
      command: sh /tmp/install_ohmyzsh.sh --unattended
      register: ohmyzsh_result
      failed_when: "'FAILED' in ohmyzsh_result.stderr" 

    - name: Download Fastfetch
      get_url:
        url: https://github.com/fastfetch-cli/fastfetch/releases/download/2.35.0/fastfetch-linux-amd64.deb
        dest: /tmp/fastfetch-linux-amd64.deb

    - name: Install Fastfetch
      apt:
        deb: /tmp/fastfetch-linux-amd64.deb
      register: fastfetch_install
      ignore_errors: yes
      become: yes

    - name: Fix Fastfetch dependencies (if needed)
      apt:
        name: "{{ item }}"
        state: present
      loop: "{{ fastfetch_install.stdout_lines | select('match', 'dpkg: dependency problems prevent configuration') | map('regex_replace', '.*depends on ([^;]+);.*', '\\1') | list }}"
      when: fastfetch_install is failed
      become: yes

    - name: Ensure Anki directory exists
      file:
        path: /tmp/anki
        state: directory
        mode: '0755'

    - name: Download Anki
      get_url:
        url: https://github.com/ankitects/anki/releases/download/24.11/anki-24.11-linux-qt6.tar.zst
        dest: /tmp/anki-24.11-linux-qt6.tar.zst

    - name: Install Anki
      unarchive:
        src: /tmp/anki-24.11-linux-qt6.tar.zst
        dest: /tmp/anki
        remote_src: yes
        extra_opts:
          - "--strip-components=1"
    
    - name: Set permissions for Anki
      file:
        path: /tmp/anki/install.sh
        mode: '0755'

    - name: Run Anki install.sh
      command: /tmp/anki/install.sh
      args:
        chdir: /tmp/anki
      become: yes

    - name: Download Discord
      get_url:
        url: https://discord.com/api/download?platform=linux&format=deb
        dest: /tmp/discord.deb

    - name: Install Discord
      apt:
        deb: /tmp/discord.deb
      register: discord_install
      ignore_errors: yes
      become: yes

    - name: Fix Discord dependencies (if needed)
      apt:
        name: "{{ item }}"
        state: present
      loop: "{{ discord_install.stdout_lines | select('match', 'dpkg: dependency problems prevent configuration') | map('regex_replace', '.*depends on ([^;]+);.*', '\\1') | list }}"
      when: discord_install is failed
      become: yes

    - name: Clone dotfiles repository
      git:
        repo: https://github.com/aileks/dotfiles.git
        dest: "/home/{{ the_user }}/dotfiles"
        clone: yes
        update: no

    - name: Run setup script from dotfiles repository
      command: ~/dotfiles/setup.sh
      args:
        chdir: ~/dotfiles
      become: yes

    - name: Install pyenv
      shell: |
        curl -fsSL https://pyenv.run | bash
      args:
        creates: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv"
    
    - name: Install Python via pyenv
      command: pyenv install 3.13
      ignore_errors: yes

    - name: Set global Python version
      command: pyenv global 3.13

    - name: Install nvm
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash
      args:
        creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

    - name: Source nvm
      shell: |
        export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

    - name: Install Node via nvm
      command: nvm install --lts
      ignore_errors: yes

    - name: Set global Node version
      command: nvm use --lts

    - name: Ensure xsessions directory exists
      file:
        path: /usr/share/xsessions
        state: directory
        mode: '0755'
      become: yes

    - name: Create DWM session desktop file
      copy:
        content: |
          [Desktop Entry]
          Name=DWM
          Comment=Dynamic Window Manager
          Exec=/home/aileks/.config/dwm/scripts/./run.sh
          Type=Application
        dest: /usr/share/xsessions/dwm.desktop
      become: yes

